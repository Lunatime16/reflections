What happens when you initialize a repository? Why do 
you need to do it?
Initializing a repository begins a new git repo to start
to save your files. Without a repository you cannot use git.

How is the staging area different from the working directory 
and the repository? What value do you think it offers?
The staging area allows the user to make commits for different
file(s) that may be related and leave out others that aren't 
while in the same directory.

How can you use the staging area to make sure you have one 
commit per logical change?
The staging area can be used to see the differences in the file(s) 
so that the user can see the if the change warrants a commit or 
needs more work.

What are some situations when branches would be helpful in keeping 
your history organized? How would branches help?
Branches are helpful when trying a new feature or reworking your
project significantly but the user still needs to have the original
working project. Branches would not let the two files interfere with
each other.

How do the diagrams help you visualize the branch structure?
Diagrams can help you see where branches split off and any 
detached heads.

What is the result of merging two branches together? Why do we 
represent it in the diagram the way we do?
Merging two branches together merges changes to files and combines
commits. The diagram shows each branch going into each other to show
that they are now one.

What are the pros and cons of Gitâ€™s automatic merging vs. always 
doing merges manually?
Git's automatic merging is fast and doesn't ask the user much but it
doesn't know how to resolve conflicts. Merging manually takes longer but
conflicts can be resolved exactly how the user wants it to be.